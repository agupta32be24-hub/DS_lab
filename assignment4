#include <iostream>
#define Q_SIZE 10
using namespace std;
class SQueue {
private:
    int arr[Q_SIZE];
    int front, rear;

public:
    SQueue() : front(-1), rear(-1) {}

    void enqueue(int val) {
        if (isFull()) {
            cout << "Queue is full (Overflow).\n";
            return;
        }
        if (isEmpty()) front = 0;
        arr[++rear] = val;
        cout << val << " enqueued.\n";
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty (Underflow).\n";
            return -1;
        }
        int val = arr[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
        return val;
    }

    bool isEmpty() {
        return front == -1;
    }

    bool isFull() {
        return rear == Q_SIZE - 1;
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty.\n";
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " ";
        }
        cout << "\n";
    }

    int peek() {
        if (isEmpty()) {
            cout << "Queue is empty, peek failed.\n";
            return -1;
        }
        return arr[front];
    }
};

int main() {
    SQueue q;
    int choice, val;

    do {
        cout << "\n MENU \n";
        cout << "1. enqueue()\n2. dequeue()\n3. isempty()\n4. isfull()\n5. disp()\n6. peek()\n7. exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; q.enqueue(val); break;
            case 2: val = q.dequeue(); if (val != -1) cout << "Dequeued value: " << val << "\n"; break;
            case 3: cout << (q.isEmpty() ? "Queue is empty." : "Queue is NOT empty.") << "\n"; break;
            case 4: cout << (q.isFull() ? "Queue is full." : "Queue is NOT full.") << "\n"; break;
            case 5: q.display(); break;
            case 6: val = q.peek(); if (val != -1) cout << "Front element: " << val << "\n"; break;
            case 7: cout << "Exiting.\n"; break;
            default: cout << "Invalid choice.\n";
        }
    } while (choice != 7);
    return 0;
}












q2


#include <iostream>
#define C_SIZE 5
using namespace std;
class CQueue {
private:
    int arr[C_SIZE];
    int front, rear;

public:
    CQueue() : front(-1), rear(-1) {}

    void cEnq(int val) {
        if (isFull()) {
            cout << "Circular Queue is full (Overflow).\n";
            return;
        }
        if (isEmpty()) front = 0;
        rear = (rear + 1) % C_SIZE;
        arr[rear] = val;
        cout << val << " enqueued.\n";
    }

    int cDeq() {
        if (isEmpty()) {
            cout << "Circular Queue is empty (Underflow).\n";
            return -1;
        }
        int val = arr[front];
        if (front == rear) { // Last element
            front = rear = -1;
        } else {
            front = (front + 1) % C_SIZE;
        }
        return val;
    }

    bool isEmpty() {
        return front == -1;
    }

    bool isFull() {
        return (rear + 1) % C_SIZE == front;
    }

    void display() {
        if (isEmpty()) {
            cout << "Circular Queue is empty.\n";
            return;
        }
        cout << "Queue elements: ";
        int i = front;
        do {
            cout << arr[i] << " ";
            i = (i + 1) % C_SIZE;
        } while (i != (rear + 1) % C_SIZE);
        cout << "\n";
    }

    int peek() {
        if (isEmpty()) {
            cout << "Queue is empty, peek failed.\n";
            return -1;
        }
        return arr[front];
    }
};

int main() {
    CQueue q;
    int choice, val;

    do {
        cout << "\nrotatedqueue\n";
        cout << "1. enqueue()\n2. dequeue()\n3. isempty()\n4. isfull()\n5. display()\n6. peek()\n7. exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; q.cEnq(val); break;
            case 2: val = q.cDeq(); if (val != -1) cout << "Dequeued value: " << val << "\n"; break;
            case 3: cout << (q.isEmpty() ? "Queue is empty." : "Queue is NOT empty.") << "\n"; break;
            case 4: cout << (q.isFull() ? "Queue is full." : "Queue is NOT full.") << "\n"; break;
            case 5: q.display(); break;
            case 6: val = q.peek(); if (val != -1) cout << "Front element: " << val << "\n"; break;
            case 7: cout << "Exiting.\n"; break;
            default: cout << "Invalid choice.\n";
        }
    } while (choice != 7);
    return 0;
}







q3

#include <iostream>
#include <queue>
#include <string>
#include <map>
using namespace std;
string findFirstNonRep(const string& str) {
    map<char, int> freq;
    queue<char> q;
    string result = "";

    for (char c : str) {
        freq[c]++;
        q.push(c);

        while (!q.empty()) {
            if (freq[q.front()] > 1) {
                q.pop();
            } else {
                result += q.front();
                break;
            }
        }
        if (q.empty()) {
            result += "-1";
        }
    }
    return result;
}

int main() {
    string input = "a a b c"; 
    string output = "";
    string simplified_input = "aabc";

    map<char, int> freq;
    queue<char> q;
    
    for (char c : simplified_input) {
        freq[c]++;
        q.push(c);

        while (!q.empty()) {
            if (freq[q.front()] > 1) {
                q.pop();
            } else {
                cout << q.front() << " ";
                break;
            }
        }
        if (q.empty()) {
            cout << "-1" << " ";
        }
    }
    cout << endl;
    
    return 0;
}










q4


#include <iostream>
#include <queue>
#include <string>
#include <map>
using namespace std;
string findFirstNonRep(const string& str) {
    map<char, int> freq;
    queue<char> q;
    string result = "";

    for (char c : str) {
        freq[c]++;
        q.push(c);

        while (!q.empty()) {
            if (freq[q.front()] > 1) {
                q.pop();
            } else {
                result += q.front();
                break;
            }
        }
        if (q.empty()) {
            result += "-1";
        }
    }
    return result;
}

int main() {
    using namespace std;
    string input = "a a b c"; 
    string output = "";
    string simplified_input = "aabc"; 

    map<char, int> freq;
    queue<char> q;
    
    for (char c : simplified_input) {
        freq[c]++;
        q.push(c);

        while (!q.empty()) {
            if (freq[q.front()] > 1) {
                q.pop();
            } else {
                cout << q.front() << " ";
                break;
            }
        }
        if (q.empty()) {
            cout << "-1" << " ";
        }
    }
    cout << endl;
    
    return 0;
}









q5


#include <iostream>
#include <queue>
using namespace std;
class Stack2Q {
private:
    queue<int> q1;
    queue<int> q2;

public:
    void push(int x) {
        q1.push(x); 
    }

    int pop() {
        if (q1.empty()) return -1;
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }

        int val = q1.front();
        q1.pop();
        swap(q1, q2);
        return val; 
    }
    
    bool empty() { return q1.empty(); }
};

int main() {
    Stack2Q s;
    s.push(10);
    s.push(20);
    cout << "Popped: " << s.pop() << endl; 
    s.push(30);
    cout << "Popped: " << s.pop() << endl; 
    cout << "Popped: " << s.pop() << endl; 
    return 0;
}




q5 b



#include <iostream>
#include <queue>
using namespace std;
class Stack1Q {
private:
    queue<int> q;

public:
    void push(int x) {
        int s = q.size();
        q.push(x);
        for (int i = 0; i < s; i++) {
            q.push(q.front());
            q.pop();
        } 
    }

    int pop() {
        if (q.empty()) return -1;
        int val = q.front();
        q.pop(); 
        return val;
    }
    
    bool empty() { return q.empty(); }
};

int main() {
    Stack1Q s;
    s.push(10);
    s.push(20);
    cout << "Popped: " << s.pop() << endl;
    s.push(30);
    cout << "Popped: " << s.pop() << endl;
    cout << "Popped: " << s.pop() << endl;
    return 0;
}
